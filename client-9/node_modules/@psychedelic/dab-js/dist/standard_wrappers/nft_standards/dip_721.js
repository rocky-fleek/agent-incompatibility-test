"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const agent_1 = require("@dfinity/agent");
const dip_721_did_1 = __importDefault(require("../../idls/dip_721.did"));
const default_1 = __importDefault(require("./default"));
const standards_1 = require("../../constants/standards");
const extractMetadataValue = (metadata) => {
    const metadataKey = Object.keys(metadata)[0];
    const value = metadata[metadataKey];
    return typeof value === 'object' ? JSON.stringify(value) : value;
};
class ERC721 extends default_1.default {
    constructor(canisterId, agent) {
        super(canisterId, agent);
        this.standard = standards_1.NFT.dip721;
        this.actor = agent_1.Actor.createActor(dip_721_did_1.default, {
            agent, canisterId,
        });
    }
    getUserTokens(principal) {
        return __awaiter(this, void 0, void 0, function* () {
            const userTokensResult = yield this.actor.getMetadataForUserDip721(principal);
            const tokens = userTokensResult || [];
            return tokens.map((token) => {
                const tokenIndex = token.token_id;
                const formatedMetadata = this.formatMetadata(token.metadata_desc);
                return this.serializeTokenData(formatedMetadata, tokenIndex);
            });
        });
    }
    transfer(to, tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const from = yield this.agent.getPrincipal();
            const transferResult = yield this.actor.transferFromDip721(from, to, BigInt(tokenIndex));
            if ('Err' in transferResult)
                throw new Error(`${Object.keys(transferResult.Err)[0]}: ${Object.values(transferResult.Err)[0]}`);
        });
    }
    details(tokenIndex) {
        return __awaiter(this, void 0, void 0, function* () {
            const metadataResult = yield this.actor.getMetadataDip721(BigInt(tokenIndex));
            if ('Err' in metadataResult)
                throw new Error(`${Object.keys(metadataResult.Err)[0]}: ${Object.values(metadataResult.Err)[0]}`);
            const metadata = metadataResult.Ok;
            const formatedMetadata = this.formatMetadata(metadata);
            return this.serializeTokenData(formatedMetadata, tokenIndex);
        });
    }
    serializeTokenData(metadata, tokenIndex) {
        var _a, _b;
        return {
            index: BigInt(tokenIndex),
            canister: this.canisterId,
            metadata,
            url: ((_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.location) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.TextContent) || '',
            standard: this.standard,
        };
    }
    formatMetadata(metadata) {
        const metadataResult = { properties: [] };
        for (const part of metadata) {
            const purpose = Object.keys(part.purpose)[0];
            part.key_val_data.forEach(({ key, val }) => {
                metadataResult[key] = { value: val, purpose };
                metadataResult.properties = [...metadataResult.properties, { name: key, value: extractMetadataValue(val) }];
            });
        }
        metadataResult.properties = metadataResult.properties.filter(({ name }) => name !== 'location');
        return metadataResult;
    }
}
exports.default = ERC721;
